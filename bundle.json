{
    "{6EA7345F-9633-499B-AD19-0B9F3C54D998}": {
        "source": "{\n  \"name\": \"controller\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Keyboard, Mouse and Window Operations\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/controller.git\"\n  },\n  \"keywords\": [\n    \"Keyboard\",\n    \"Mouse\",\n    \"Window\"\n  ],\n  \"author\": \"wachaon@gmail.com\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/controller/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/controller#readme\"\n}\n",
        "path": "{controller}/package.json"
    },
    "{908E7D63-7BA5-43DD-9FB6-D4916D5E05D6}": {
        "source": "const compile = require('./run/compile.js')\r\n\r\n\r\nmodule.exports = {\r\n    compile\r\n}",
        "mapping": {
            "./run/compile.js": "{39BC77E4-1BCD-4129-A01B-B053E8386569}"
        },
        "path": "{controller}/index.js"
    },
    "{39BC77E4-1BCD-4129-A01B-B053E8386569}": {
        "source": "const WShell = require('WScript.Shell')\r\nconst { toPosixSep, toWin32Sep, resolve } = require('pathname')\r\nconst { existsFileSync } = require('filesystem')\r\nconst isCLI = require('isCLI')\r\n\r\nif (isCLI(__filename)) compile()\r\nelse module.exports = compile\r\n\r\nfunction compile() {\r\n    const specs = ['keyboard', 'mouse']\r\n\r\n    let CSharp = specs.map(spec => {\r\n        return {\r\n            key: spec + '.exe',\r\n            path: toWin32Sep(resolve(__dirname, spec + '.cs'))\r\n        }\r\n    })\r\n\r\n    const versions = [\r\n        \"v4.0.30319\",\r\n        \"V3.5\",\r\n        \"V3.0\",\r\n        \"v2.0.50727\",\r\n        \"v1.1.4322\",\r\n        \"v1.0.3705\"\r\n    ]\r\n\r\n    const exe = versions.map(ver => {\r\n        return resolve(\r\n            toPosixSep(WShell.ExpandEnvironmentStrings(\"%SystemRoot%\")),\r\n            \"Microsoft.NET/Framework\",\r\n            ver,\r\n            \"csc.exe\"\r\n        )\r\n    }).find(ex => existsFileSync(ex))\r\n\r\n    CSharp.forEach(cs => {\r\n        const command = `${toWin32Sep(exe)} /target:exe /out:${cs.key} ${cs.path}`\r\n        //console.log('%O', command)\r\n        const exec = WShell.Exec(command)\r\n        while (!exec.StdOut.AtEndOfStream) console.log(exec.StdOut.ReadLine())\r\n        while (!exec.StdErr.AtEndOfStream) console.error(exec.StdErr.ReadAll())\r\n    })\r\n}\r\n",
        "mapping": {},
        "path": "{controller}/run/compile.js"
    },
    "keyboard.cs": {
        "source": "using System;\nusing System.Runtime.InteropServices;\n\npublic class KeyboardSimulator {\n    public static void Main (params string[] args) {\n        string method = args[0];\n        int key_code = Int32.Parse(args[1]);\n        byte input = (byte)key_code;\n\n        if (method == \"enter\" || method == \"down\") {\n            KeyDown(input);\n        }\n        if (method == \"enter\" || method == \"up\") {\n            KeyUp(input);\n        }\n    }\n\n    [DllImport(\"user32.dll\")]\n    private static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);\n\n    private const uint KEYEVENTF_EXTENDEDKEY = 0x1;\n    private const uint KEYEVENTF_KEYUP = 0x2;\n\n    public static void KeyDown(byte key) {\n        keybd_event(key, 0, KEYEVENTF_EXTENDEDKEY, 0);\n    }\n\n    public static void KeyUp(byte key) {\n        keybd_event(key, 0, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0);\n    }\n}\n",
        "path": "{controller}/run/keyboard.cs"
    },
    "mouse.cs": {
        "source": "using System;\nusing System.Runtime.InteropServices;\n\npublic class MouseSimulator {\n    public static void Main (params string[] args) {\n        string method = args[0];\n        int posX = args.Length > 1 ? Int32.Parse(args[1]) : 0;\n        int posY = args.Length > 2 ? Int32.Parse(args[2]) : 0;\n\n        if (method == \"pos\") {\n            SetCursorPos(posX, posY);\n        }\n\n        if (method == \"click\" || method == \"leftDown\") {\n            mouse_event(0x2, posX, posY, 0, 0);\n        }\n        if (method == \"click\") {\n            mouse_event(0x4, 0, 0, 0, 0);\n        }\n\n        if (method == \"leftUp\") {\n            mouse_event(0x4, posX, posY, 0, 0);\n        }\n\n\n        if (method == \"rightClick\" || method == \"rightDown\") {\n            mouse_event(0x8, posX, posY, 0, 0);\n        }\n        if (method == \"rightClick\") {\n            mouse_event(0x10, 0, 0, 0, 0);\n        }\n        if (method == \"righttUp\") {\n            mouse_event(0x10, posX, posY, 0, 0);\n        }\n    }\n\n    [DllImport(\"USER32.dll\", CallingConvention = CallingConvention.StdCall)]\n    public static extern void SetCursorPos(int X, int Y);\n\n    [DllImport(\"USER32.dll\", CallingConvention = CallingConvention.StdCall)]\n    public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\n}\n",
        "path": "{controller}/run/mouse.cs"
    },
    "compile.js": {
        "source": "const WShell = require('WScript.Shell')\nconst { toPosixSep, toWin32Sep, resolve } = require('pathname')\nconst { existsFileSync } = require('filesystem')\nconst isCLI = require('isCLI')\n\nif (isCLI(__filename)) compile()\nelse module.exports = compile\n\nfunction compile() {\n    const specs = ['keyboard', 'mouse']\n\n    let CSharp = specs.map(spec => {\n        return {\n            key: spec + '.exe',\n            path: toWin32Sep(resolve(__dirname, spec + '.cs'))\n        }\n    })\n\n    const versions = [\n        \"v4.0.30319\",\n        \"V3.5\",\n        \"V3.0\",\n        \"v2.0.50727\",\n        \"v1.1.4322\",\n        \"v1.0.3705\"\n    ]\n\n    const exe = versions.map(ver => {\n        return resolve(\n            toPosixSep(WShell.ExpandEnvironmentStrings(\"%SystemRoot%\")),\n            \"Microsoft.NET/Framework\",\n            ver,\n            \"csc.exe\"\n        )\n    }).find(ex => existsFileSync(ex))\n\n    CSharp.forEach(cs => {\n        const command = `${toWin32Sep(exe)} /target:exe /out:${cs.key} ${cs.path}`\n        //console.log('%O', command)\n        const exec = WShell.Exec(command)\n        while (!exec.StdOut.AtEndOfStream) console.log(exec.StdOut.ReadLine())\n        while (!exec.StdErr.AtEndOfStream) console.error(exec.StdErr.ReadAll())\n    })\n}\n",
        "path": "{controller}/run/compile.js"
    }
}