{
    "{8CB47AEC-6719-4D19-8260-826C9B9B3D8D}": {
        "source": "{\n  \"name\": \"controller\",\n  \"version\": \"0.0.2\",\n  \"description\": \"Keyboard, Mouse and Window Operations\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/controller.git\"\n  },\n  \"keywords\": [\n    \"Keyboard\",\n    \"Mouse\",\n    \"Window\"\n  ],\n  \"author\": \"wachaon@gmail.com\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/controller/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/controller#readme\"\n}",
        "path": "{controller}/package.json"
    },
    "{52BA78E2-9DAA-4D84-A938-BCCA3EA6B52C}": {
        "source": "const WShell = require('WScript.Shell')\r\nconst compile = require('./run/compile.js')\r\nconst ps = require('ps')\r\nconst { resolve } = require('pathname')\r\nconst { readFileSync, existsFileSync } = require('filesystem')\r\n\r\nconst mouse_exe = resolve(__dirname, '../mouse.exe')\r\nconst exists_mouse_exe = existsFileSync(mouse_exe)\r\nconst keyboard_exe = resolve(__dirname, '../keyboard.exe')\r\nconst exists_keyboard_exe = existsFileSync(keyboard_exe)\r\n\r\n\r\nconst mouse = `$Source = @\"\r\n${readFileSync('./run/mouse.cs', 'auto')}\"@\r\n\r\nAdd-Type -Language CSharp -TypeDefinition $Source\r\n[MouseSimulator]::Main($args[0], $args[1], $args[2])`\r\n\r\nconst pos = function mouse_pos(x = 0, y = 0) {\r\n    // x と y は絶対値。\r\n    if (exists_mouse_exe) WShell.Exec(`${mouse_exe} pos ${x} ${y}`)\r\n    ps(mouse, ['pos', x, y])\r\n}\r\n\r\nconst click = function mouse_click(x = 0, y = 0) {\r\n    // x と y は絶対値ではなく、相対値になることに注意する。\r\n    if (exists_mouse_exe) WShell.Exec(`${mouse_exe} click ${x} ${y}`)\r\n    ps(mouse, ['click', x, y])\r\n}\r\n\r\nconst leftDown = function mouse_leftDown(x = 0, y = 0) {\r\n    // x と y は絶対値ではなく、相対値になることに注意する。\r\n    if (exists_mouse_exe) WShell.Exec(`${mouse_exe} leftDown ${x} ${y}`)\r\n    ps(mouse, ['leftDown', x, y])\r\n}\r\n\r\nconst leftUp = function mouse_leftUp(x = 0, y = 0) {\r\n    // x と y は絶対値ではなく、相対値になることに注意する。\r\n    if (exists_mouse_exe) WShell.Exec(`${mouse_exe} leftUp ${x} ${y}`)\r\n    ps(mouse, ['leftUp', x, y])\r\n}\r\n\r\nconst rightClick = function mouse_rightClick(x = 0, y = 0) {\r\n    // x と y は絶対値ではなく、相対値になることに注意する。\r\n    if (exists_mouse_exe) WShell.Exec(`${mouse_exe} rightClick ${x} ${y}`)\r\n    ps(mouse, ['rightClick', x, y])\r\n}\r\n\r\nconst rightDown = function mouse_rightDown(x = 0, y = 0) {\r\n    // x と y は絶対値ではなく、相対値になることに注意する。\r\n    if (exists_mouse_exe) WShell.Exec(`${mouse_exe} rightDown ${x} ${y}`)\r\n    ps(mouse, ['rightDown', x, y])\r\n}\r\nconst rightUp = function mouse_rightUp(x = 0, y = 0) {\r\n    // x と y は絶対値ではなく、相対値になることに注意する。\r\n    if (exists_mouse_exe) WShell.Exec(`${mouse_exe} rightUp ${x} ${y}`)\r\n    ps(mouse, ['rightUp', x, y])\r\n}\r\n\r\nconst keyboard = `$Source = @\"\r\n${readFileSync('./run/keyboard.cs', 'auto')}\"@\r\n\r\nAdd-Type -Language CSharp -TypeDefinition $Source\r\n[KeyboardSimulator]::Main($args[0], $args[1])`\r\n\r\n// console.log('[keyboard]: \\n%S', keyboard)\r\n\r\nconst send = function keyboard_send(keyCode) {\r\n    if (isString(keyCode)) WScript.SendKeys(keyCode)\r\n    if (isNumber(keyCode)) {\r\n        if (exists_keyboard_exe) WShell.Exec(`${keyboard_exe} send ${keyCode}`)\r\n        else ps(keyboard, ['send', keyCode])\r\n    }\r\n}\r\n\r\nconst press = function keyboard_press(keyCode) {\r\n    if (exists_keyboard_exe) WShell.Exec(`${keyboard_exe} press ${keyCode}`)\r\n    if (isNumber(keyCode)) ps(keyboard, ['press', keyCode])\r\n}\r\n\r\nconst release = function keyboard_release(keyCode) {\r\n    if (exists_keyboard_exe) WShell.Exec(`${keyboard_exe} release ${keyCode}`)\r\n    if (isNumber(keyCode)) ps(keyboard, ['release', keyCode])\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    send,\r\n    press,\r\n    release,\r\n    pos,\r\n    click,\r\n    leftDown,\r\n    leftUp,\r\n    rightClick,\r\n    rightDown,\r\n    rightUp,\r\n    compile,\r\n    VK_LBUTTON: 0x01, // マウスの左ボタン\r\n    VK_RBUTTON: 0x02, // マウスの右ボタン\r\n    VK_CANCEL: 0x03, // Ctrl+Break処理\r\n    VK_MBUTTON: 0x04, // 3ボタンマウスの真ん中ボタン\r\n    VK_XBUTTON1: 0x05, // マウスのX1ボタン\r\n    VK_XBUTTON2: 0x06, // マウスのX2ボタン\r\n    VK_BACK: 0x08, // BackSpaceキー\r\n    VK_TAB: 0x09, // Tabキー\r\n    VK_CLEAR: 0x0C, // Clearキー\r\n    VK_RETURN: 0x0D, // Enterキー\r\n    VK_SHIFT: 0x10, // シフトキー\r\n    VK_CONTROL: 0x11, // Ctrlキー\r\n    VK_MENU: 0x12, // Altキー\r\n    VK_PAUSE: 0x13, // Pauseキー\r\n    VK_CAPITAL: 0x14, // CapsLockキー\r\n    VK_KANA: 0x15, // IME カナモード\r\n    VK_HANGEUL: 0x15, // IME Hanguel mode (maintained for compatibility; use VK_HANGUL)\r\n    VK_HANGUL: 0x15, // IME Hangul mode\r\n    VK_JUNJA: 0x17, // IME Junja mode\r\n    VK_FINAL: 0x18, // IME final mode\r\n    VK_HANJA: 0x19, // IME Hanja mode\r\n    VK_KANJI: 0x19, // IME 漢字モード\r\n    VK_ESCAPE: 0x1B, // Escキー\r\n    VK_CONVERT: 0x1C, // IME変換\r\n    VK_NONCONVERT: 0x1D, // IME無変換\r\n    VK_ACCEPT: 0x1E, // IME accept\r\n    VK_MODECHANGE: 0x1F, // IME mode change request\r\n    VK_SPACE: 0x20, // スペースキー\r\n    VK_PRIOR: 0x21, // Page Upキー\r\n    VK_NEXT: 0x22, // Page Downキー\r\n    VK_END: 0x23, // Endキー\r\n    VK_HOME: 0x24, // Homeキー\r\n    VK_LEFT: 0x25, // カーソルキー左\r\n    VK_UP: 0x26, // カーソルキー上\r\n    VK_RIGHT: 0x27, // カーソルキー右\r\n    VK_DOWN: 0x28, // カーソルキー下\r\n    VK_SELECT: 0x29, // Selectキー\r\n    VK_PRINT: 0x2A, // Printキー\r\n    VK_EXECUTE: 0x2B, // Executeキー\r\n    VK_SNAPSHOT: 0x2C, // Print Screenキー\r\n    VK_INSERT: 0x2D, // Insertキー\r\n    VK_DELETE: 0x2E, // Deleteキー\r\n    VK_HELP: 0x2F, // Helpキー\r\n    VK_0: 0x30, // 0キー\r\n    VK_1: 0x31, // 1キー\r\n    VK_2: 0x32, // 2キー\r\n    VK_3: 0x33, // 3キー\r\n    VK_4: 0x34, // 4キー\r\n    VK_5: 0x35, // 5キー\r\n    VK_6: 0x36, // 6キー\r\n    VK_7: 0x37, // 7キー\r\n    VK_8: 0x38, // 8キー\r\n    VK_9: 0x39, // 9キー\r\n    VK_A: 0x41, // Aキー\r\n    VK_B: 0x42, // Bキー\r\n    VK_C: 0x43, // Cキー\r\n    VK_D: 0x44, // Dキー\r\n    VK_E: 0x45, // Eキー\r\n    VK_F: 0x46, // Fキー\r\n    VK_G: 0x47, // Gキー\r\n    VK_H: 0x48, // Hキー\r\n    VK_I: 0x49, // Iキー\r\n    VK_J: 0x4A, // Jキー\r\n    VK_K: 0x4B, // Kキー\r\n    VK_L: 0x4C, // Lキー\r\n    VK_M: 0x4D, // Mキー\r\n    VK_N: 0x4E, // Nキー\r\n    VK_O: 0x4F, // Oキー\r\n    VK_P: 0x50, // Pキー\r\n    VK_Q: 0x51, // Qキー\r\n    VK_R: 0x52, // Rキー\r\n    VK_S: 0x53, // Sキー\r\n    VK_T: 0x54, // Tキー\r\n    VK_U: 0x55, // Uキー\r\n    VK_V: 0x56, // Vキー\r\n    VK_W: 0x57, // Wキー\r\n    VK_X: 0x58, // Xキー\r\n    VK_Y: 0x59, // Yキー\r\n    VK_Z: 0x5A, // Zキー\r\n    VK_LWIN: 0x5B, // 左Windowsキー\r\n    VK_RWIN: 0x5C, // 右Windowsキー\r\n    VK_APPS: 0x5D, // アプリケーションキー\r\n    VK_SLEEP: 0x5F, // スリープキー\r\n    VK_NUMPAD0: 0x60, // テンキー0\r\n    VK_NUMPAD1: 0x61, // テンキー1\r\n    VK_NUMPAD2: 0x62, // テンキー2\r\n    VK_NUMPAD3: 0x63, // テンキー3\r\n    VK_NUMPAD4: 0x64, // テンキー4\r\n    VK_NUMPAD5: 0x65, // テンキー5\r\n    VK_NUMPAD6: 0x66, // テンキー6\r\n    VK_NUMPAD7: 0x67, // テンキー7\r\n    VK_NUMPAD8: 0x68, // テンキー8\r\n    VK_NUMPAD9: 0x69, // テンキー9\r\n    VK_MULTIPLY: 0x6A, // *キー\r\n    VK_ADD: 0x6B, // +キー\r\n    VK_SEPARATOR: 0x6C, // Separator key\r\n    VK_SUBTRACT: 0x6D, // -キー\r\n    VK_DECIMAL: 0x6E, // . キー\r\n    VK_DIVIDE: 0x6F, // /キー\r\n    VK_F1: 0x70, // F1キー\r\n    VK_F2: 0x71, // F2キー\r\n    VK_F3: 0x72, // F3キー\r\n    VK_F4: 0x73, // F4キー\r\n    VK_F5: 0x74, // F5キー\r\n    VK_F6: 0x75, // F6キー\r\n    VK_F7: 0x76, // F7キー\r\n    VK_F8: 0x77, // F8キー\r\n    VK_F9: 0x78, // F9キー\r\n    VK_F10: 0x79, // F10キー\r\n    VK_F11: 0x7A, // F11キー\r\n    VK_F12: 0x7B, // F12キー\r\n    VK_F13: 0x7C, // F13キー\r\n    VK_F14: 0x7D, // F14キー\r\n    VK_F15: 0x7E, // F15キー\r\n    VK_F16: 0x7F, // F16キー\r\n    VK_F17: 0x80, // F17キー\r\n    VK_F18: 0x81, // F18キー\r\n    VK_F19: 0x82, // F19キー\r\n    VK_F20: 0x83, // F20キー\r\n    VK_F21: 0x84, // F21キー\r\n    VK_F22: 0x85, // F22キー\r\n    VK_F23: 0x86, // F23キー\r\n    VK_F24: 0x87, // F24キー\r\n    VK_NUMLOCK: 0x90, // NumLockキー\r\n    VK_SCROLL: 0x91, // ScrollLockキー\r\n    VK_LSHIFT: 0xA0, // 左シフトキー\r\n    VK_RSHIFT: 0xA1, // 右シフトキー\r\n    VK_LCONTROL: 0xA2, // 左Ctrlキー\r\n    VK_RCONTROL: 0xA3, // 右Ctrlキー\r\n    VK_LMENU: 0xA4, // 左Altキー\r\n    VK_RMENU: 0xA5, // 右Altキー\r\n    VK_BROWSER_BACK: 0xA6, // ブラウザ戻るキー\r\n    VK_BROWSER_FORWARD: 0xA7, // ブラウザ進むキー\r\n    VK_BROWSER_REFRESH: 0xA8, // ブラウザ更新キー\r\n    VK_BROWSER_STOP: 0xA9, // ブラウザ停止キー\r\n    VK_BROWSER_SEARCH: 0xAA, // ブラウザサーチキー\r\n    VK_BROWSER_FAVORITES: 0xAB, // ブラウザお気に入りキー\r\n    VK_BROWSER_HOME: 0xAC, // ブラウザHomeキー\r\n    VK_VOLUME_MUTE: 0xAD, // ボリューム無音キー\r\n    VK_VOLUME_DOWN: 0xAE, // ボリューム低下キー\r\n    VK_VOLUME_UP: 0xAF, // ボリューム上昇キー\r\n    VK_MEDIA_NEXT_TRACK: 0xB0, // メディア次トラックキー\r\n    VK_MEDIA_PREV_TRACK: 0xB1, // メディア前トラックキー\r\n    VK_MEDIA_STOP: 0xB2, // メディア停止キー\r\n    VK_MEDIA_PLAY_PAUSE: 0xB3, // メディア再生／一時停止キー\r\n    VK_LAUNCH_MAIL: 0xB4, // メール起動キー\r\n    VK_LAUNCH_MEDIA_SELECT: 0xB5, // メディア選択キー\r\n    VK_LAUNCH_APP1: 0xB6, // 起動キー1\r\n    VK_LAUNCH_APP2: 0xB7, // 起動キー2\r\n    VK_ICO_HELP: 0xE3, // ?\r\n    VK_ICO_00: 0xE4, // ?\r\n    VK_PROCESSKEY: 0xE5, // IME PROCESS key\r\n    VK_ICO_CLEAR: 0xE6, // ?\r\n    VK_PACKET: 0xE7, // 詳細はMSDN参照\r\n    VK_OEM_RESET: 0xE9, // OEM定義キー\r\n    VK_OEM_JUMP: 0xEA, // OEM定義キー\r\n    VK_OEM_PA1: 0xEB, // OEM定義キー\r\n    VK_OEM_PA2: 0xEC, // OEM定義キー\r\n    VK_OEM_PA3: 0xED, // OEM定義キー\r\n    VK_OEM_WSCTRL: 0xEE, // OEM定義キー\r\n    VK_OEM_CUSEL: 0xEF, // OEM定義キー\r\n    VK_OEM_ATTN: 0xF0, // OEM定義キー\r\n    VK_OEM_FINISH: 0xF1, // OEM定義キー\r\n    VK_OEM_COPY: 0xF2, // OEM定義キー\r\n    VK_OEM_AUTO: 0xF3, // OEM定義キー\r\n    VK_OEM_ENLW: 0xF4, // OEM定義キー\r\n    VK_OEM_BACKTAB: 0xF5, // OEM定義キー\r\n    VK_ATTN: 0xF6, // Attn key\r\n    VK_CRSEL: 0xF7, // CrSel key\r\n    VK_EXSEL: 0xF8, // ExSel key\r\n    VK_EREOF: 0xF9, // Erase EOF key\r\n    VK_PLAY: 0xFA, // Play key\r\n    VK_ZOOM: 0xFB, // Zoom key\r\n    VK_NONAME: 0xFC, // Reserved\r\n    VK_PA1: 0xFD, // PA1 key\r\n    VK_OEM_CLEAR: 0xFE, // Clear key\r\n}",
        "mapping": {
            "./run/compile.js": "{B7C91F49-5095-4BC0-BACE-1D3D13ACACDF}"
        },
        "path": "{controller}/index.js"
    },
    "{B7C91F49-5095-4BC0-BACE-1D3D13ACACDF}": {
        "source": "const WShell = require('WScript.Shell')\r\nconst { toPosixSep, toWin32Sep, resolve } = require('pathname')\r\nconst { existsFileSync } = require('filesystem')\r\nconst isCLI = require('isCLI')\r\n\r\nif (isCLI(__filename)) compile()\r\nelse module.exports = compile\r\n\r\nfunction compile() {\r\n    const specs = ['keyboard', 'mouse']\r\n\r\n    let CSharp = specs.map(spec => {\r\n        return {\r\n            key: spec + '.exe',\r\n            path: toWin32Sep(resolve(__dirname, spec + '.cs'))\r\n        }\r\n    })\r\n\r\n    const versions = [\r\n        \"v4.0.30319\",\r\n        \"V3.5\",\r\n        \"V3.0\",\r\n        \"v2.0.50727\",\r\n        \"v1.1.4322\",\r\n        \"v1.0.3705\"\r\n    ]\r\n\r\n    const exe = versions.map(ver => {\r\n        return resolve(\r\n            toPosixSep(WShell.ExpandEnvironmentStrings(\"%SystemRoot%\")),\r\n            \"Microsoft.NET/Framework\",\r\n            ver,\r\n            \"csc.exe\"\r\n        )\r\n    }).find(ex => existsFileSync(ex))\r\n\r\n    CSharp.forEach(cs => {\r\n        const command = `${toWin32Sep(exe)} /target:exe /out:${resolve(__dirname, '../' + cs.key)} ${cs.path}`\r\n        //console.log('%O', command)\r\n        const exec = WShell.Exec(command)\r\n        while (!exec.StdOut.AtEndOfStream) console.log(exec.StdOut.ReadLine())\r\n        while (!exec.StdErr.AtEndOfStream) console.error(exec.StdErr.ReadAll())\r\n    })\r\n}\r\n",
        "mapping": {},
        "path": "{controller}/run/compile.js"
    },
    "{37A039F9-3B4B-48EC-ADFA-CD7B8DEBD01A}": {
        "source": "using System;\nusing System.Runtime.InteropServices;\n\npublic class KeyboardSimulator {\n    public static void Main (params string[] args) {\n        string method = args[0];\n        int key_code = Int32.Parse(args[1]);\n        byte input = (byte)key_code;\n\n        if (method == \"send\" || method == \"press\") {\n            KeyDown(input);\n        }\n        if (method == \"send\" || method == \"release\") {\n            KeyUp(input);\n        }\n    }\n\n    [DllImport(\"user32.dll\")]\n    private static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);\n\n    private const uint KEYEVENTF_EXTENDEDKEY = 0x1;\n    private const uint KEYEVENTF_KEYUP = 0x2;\n\n    public static void KeyDown(byte key) {\n        keybd_event(key, 0, KEYEVENTF_EXTENDEDKEY, 0);\n    }\n\n    public static void KeyUp(byte key) {\n        keybd_event(key, 0, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0);\n    }\n}\n",
        "path": "{controller}/run/keyboard.cs"
    },
    "{46A93528-4733-4E18-8089-9A41186A534D}": {
        "source": "using System;\nusing System.Runtime.InteropServices;\n\npublic class MouseSimulator {\n    public static void Main (params string[] args) {\n        string method = args[0];\n        int posX = args.Length > 1 ? Int32.Parse(args[1]) : 0;\n        int posY = args.Length > 2 ? Int32.Parse(args[2]) : 0;\n\n        if (method == \"pos\") {\n            SetCursorPos(posX, posY);\n        }\n\n        if (method == \"click\" || method == \"leftDown\") {\n            mouse_event(0x2, posX, posY, 0, 0);\n        }\n        if (method == \"click\") {\n            mouse_event(0x4, 0, 0, 0, 0);\n        }\n\n        if (method == \"leftUp\") {\n            mouse_event(0x4, posX, posY, 0, 0);\n        }\n\n        if (method == \"rightClick\" || method == \"rightDown\") {\n            mouse_event(0x8, posX, posY, 0, 0);\n        }\n        if (method == \"rightClick\") {\n            mouse_event(0x10, 0, 0, 0, 0);\n        }\n        if (method == \"righttUp\") {\n            mouse_event(0x10, posX, posY, 0, 0);\n        }\n    }\n\n    [DllImport(\"USER32.dll\", CallingConvention = CallingConvention.StdCall)]\n    public static extern void SetCursorPos(int X, int Y);\n\n    [DllImport(\"USER32.dll\", CallingConvention = CallingConvention.StdCall)]\n    public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\n}\n",
        "path": "{controller}/run/mouse.cs"
    }
}